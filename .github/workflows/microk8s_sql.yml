name: microk8s_sql
# This builds, packages and tests pygluu-kubernetes
on:
  push:
    paths:
      - "pygluu/**"
      - "tests/**"
      - "setup.py"
  workflow_dispatch:
jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 8
      matrix:
        python-version: [3.7]
        gluu-version: ['"4.3.0_dev"']
        test-cases: ["helm-install"]
        # add '"pgsql" when supported
        persistence-backends: ['"sql"']
    steps:
    - name: Checkout code
      uses: actions/checkout@master
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2.2.2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo python3 -m pip install --upgrade pip
        sudo pip3 install setuptools --upgrade
        sudo pip3 install pyOpenSSL --upgrade
        sudo pip3 install requests --upgrade

    - name: Lint with flake8
      run: |
        sudo pip3 install flake8
        # stop the build if there are Python syntax errors or undefined names
        sudo flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        sudo flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Build Zipapp
      run: |
        sudo apt-get update
        sudo apt-get install build-essential
        sudo pip3 install shiv
        mkdir /home/runner/work/test
        cp -r ./* /home/runner/work/test/
        cd /home/runner/work/test/
        sudo make zipapp

    - name: Test 1 settings(LDAP)
      id: test1_settings
      run: |
        default_iface=$(awk '$2 == 00000000 { print $1 }' /proc/net/route)
        ip=$(ip addr show dev "$default_iface" | awk '$1 == "inet" { sub("/.*", "", $2); print $2 }')
        cat <<EOF > /home/runner/work/test/settings.json
        {
          "ACCEPT_GLUU_LICENSE": "Y",
          "GLUU_VERSION": "4.3.0_dev",
          "TEST_ENVIRONMENT": "",
          "GLUU_UPGRADE_TARGET_VERSION": ${{ matrix.gluu-version }},
          "GLUU_HELM_RELEASE_NAME": "gluu",
          "NGINX_INGRESS_RELEASE_NAME": "ningress",
          "NGINX_INGRESS_NAMESPACE": "ingress-nginx",
          "POSTGRES_NAMESPACE": "",
          "POSTGRES_URL": "",
          "USE_ISTIO": "N",
          "USE_ISTIO_INGRESS": "",
          "ISTIO_SYSTEM_NAMESPACE": "",
          "NODES_IPS": [
            "$ip"
          ],
          "NODES_ZONES": [],
          "NODES_NAMES": [],
          "NODE_SSH_KEY": "",
          "HOST_EXT_IP": "172.31.34.118",
          "VERIFY_EXT_IP": "",
          "AWS_LB_TYPE": "",
          "USE_ARN": "",
          "VPC_CIDR": "",
          "ARN_AWS_IAM": "",
          "LB_ADD": "",
          "REDIS_URL": "",
          "REDIS_TYPE": "",
          "REDIS_PW": "",
          "REDIS_USE_SSL": "false",
          "REDIS_SSL_TRUSTSTORE": "",
          "REDIS_SENTINEL_GROUP": "",
          "REDIS_NAMESPACE": "",
          "INSTALL_REDIS": "",
          "INSTALL_POSTGRES": "",
          "INSTALL_JACKRABBIT": "Y",
          "JACKRABBIT_STORAGE_SIZE": "4Gi",
          "JACKRABBIT_URL": "http://jackrabbit:8080",
          "JACKRABBIT_ADMIN_ID": "admin",
          "JACKRABBIT_ADMIN_PASSWORD": "+9_.m}cr5>K9C-s#=Q;#i>hL",
          "JACKRABBIT_CLUSTER": "N",
          "JACKRABBIT_PG_USER": "",
          "JACKRABBIT_PG_PASSWORD": "",
          "JACKRABBIT_DATABASE": "",
          "DEPLOYMENT_ARCH": "microk8s",
          "PERSISTENCE_BACKEND": "sql",
          "INSTALL_COUCHBASE": "",
          "COUCHBASE_NAMESPACE": "",
          "COUCHBASE_VOLUME_TYPE": "",
          "COUCHBASE_CLUSTER_NAME": "",
          "COUCHBASE_URL": "",
          "COUCHBASE_USER": "",
          "COUCHBASE_BUCKET_PREFIX": "",
          "COUCHBASE_SUPERUSER": "",
          "COUCHBASE_PASSWORD": "",
          "COUCHBASE_SUPERUSER_PASSWORD": "",
          "COUCHBASE_CRT": "",
          "COUCHBASE_CN": "",
          "COUCHBASE_INDEX_NUM_REPLICA": "",
          "COUCHBASE_SUBJECT_ALT_NAME": "",
          "COUCHBASE_CLUSTER_FILE_OVERRIDE": "",
          "COUCHBASE_USE_LOW_RESOURCES": "",
          "COUCHBASE_DATA_NODES": "",
          "COUCHBASE_QUERY_NODES": "",
          "COUCHBASE_INDEX_NODES": "",
          "COUCHBASE_SEARCH_EVENTING_ANALYTICS_NODES": "",
          "COUCHBASE_GENERAL_STORAGE": "",
          "COUCHBASE_DATA_STORAGE": "",
          "COUCHBASE_INDEX_STORAGE": "",
          "COUCHBASE_QUERY_STORAGE": "",
          "COUCHBASE_ANALYTICS_STORAGE": "",
          "COUCHBASE_INCR_BACKUP_SCHEDULE": "",
          "COUCHBASE_FULL_BACKUP_SCHEDULE": "",
          "COUCHBASE_BACKUP_RETENTION_TIME": "",
          "COUCHBASE_BACKUP_STORAGE_SIZE": "",
          "LDAP_BACKUP_SCHEDULE": "",
          "NUMBER_OF_EXPECTED_USERS": "",
          "EXPECTED_TRANSACTIONS_PER_SEC": "",
          "USING_CODE_FLOW": "",
          "USING_SCIM_FLOW": "",
          "USING_RESOURCE_OWNER_PASSWORD_CRED_GRANT_FLOW": "",
          "DEPLOY_MULTI_CLUSTER": "",
          "HYBRID_LDAP_HELD_DATA": "",
          "LDAP_JACKRABBIT_VOLUME": "",
          "APP_VOLUME_TYPE": 1,
          "LDAP_STATIC_VOLUME_ID": "",
          "LDAP_STATIC_DISK_URI": "",
          "GLUU_CACHE_TYPE": "NATIVE_PERSISTENCE",
          "GLUU_NAMESPACE": "gluu",
          "GLUU_FQDN": "demoexample.gluu.org",
          "COUNTRY_CODE": "US",
          "STATE": "TX",
          "EMAIL": "support@gluu.org",
          "CITY": "Austin",
          "ORG_NAME": "Gluu",
          "GMAIL_ACCOUNT": "",
          "GOOGLE_NODE_HOME_DIR": "",
          "IS_GLUU_FQDN_REGISTERED": "N",
          "LDAP_PW": "P@ssw0rdummy",
          "ADMIN_PW": "dG;6BW",
          "OXD_APPLICATION_KEYSTORE_CN": "oxd-server",
          "OXD_ADMIN_KEYSTORE_CN": "oxd-server",
          "LDAP_STORAGE_SIZE": "",
          "OXAUTH_REPLICAS": 1,
          "OXTRUST_REPLICAS": 1,
          "LDAP_REPLICAS": "",
          "OXSHIBBOLETH_REPLICAS": 1,
          "OXPASSPORT_REPLICAS": 1,
          "OXD_SERVER_REPLICAS": 1,
          "CASA_REPLICAS": 1,
          "FIDO2_REPLICAS": 1,
          "SCIM_REPLICAS": 1,
          "ENABLE_OXTRUST_API": "Y",
          "ENABLE_OXTRUST_TEST_MODE": "Y",
          "ENABLE_CACHE_REFRESH": "N",
          "ENABLE_OXD": "Y",
          "ENABLE_FIDO2": "Y",
          "ENABLE_SCIM": "Y",
          "ENABLE_OXPASSPORT": "Y",
          "ENABLE_OXSHIBBOLETH": "Y",
          "ENABLE_CASA": "Y",
          "ENABLE_OXAUTH_KEY_ROTATE": "Y",
          "ENABLE_OXTRUST_API_BOOLEAN": "true",
          "ENABLE_OXTRUST_TEST_MODE_BOOLEAN": "true",
          "ENABLE_OXPASSPORT_BOOLEAN": "true",
          "ENABLE_CASA_BOOLEAN": "true",
          "ENABLE_SAML_BOOLEAN": "true",
          "ENABLED_SERVICES_LIST": [
            "oxauth",
            "update-lb-ip",
            "jackrabbit",
            "oxauth-key-rotation",
            "scim",
            "oxtrust",
            "oxpassport",
            "fido2",
            "config",
            "oxd-server",
            "oxshibboleth",
            "persistence",
            "casa"
          ],
          "OXAUTH_KEYS_LIFE": 48,
          "EDIT_IMAGE_NAMES_TAGS": "N",
          "CASA_IMAGE_NAME": "gluufederation/casa",
          "CASA_IMAGE_TAG": "4.3.0_dev",
          "CONFIG_IMAGE_NAME": "gluufederation/config-init",
          "CONFIG_IMAGE_TAG": "4.3.0_dev",
          "CACHE_REFRESH_ROTATE_IMAGE_NAME": "gluufederation/cr-rotate",
          "CACHE_REFRESH_ROTATE_IMAGE_TAG": "4.3.0_dev",
          "CERT_MANAGER_IMAGE_NAME": "gluufederation/certmanager",
          "CERT_MANAGER_IMAGE_TAG": "4.3.0_dev",
          "LDAP_IMAGE_NAME": "gluufederation/opendj",
          "LDAP_IMAGE_TAG": "4.3.0_dev",
          "JACKRABBIT_IMAGE_NAME": "gluufederation/jackrabbit",
          "JACKRABBIT_IMAGE_TAG": "4.3.0_dev",
          "OXAUTH_IMAGE_NAME": "gluufederation/oxauth",
          "OXAUTH_IMAGE_TAG": "4.3.0_dev",
          "FIDO2_IMAGE_NAME": "gluufederation/fido2",
          "FIDO2_IMAGE_TAG": "4.3.0_dev",
          "SCIM_IMAGE_NAME": "gluufederation/scim",
          "SCIM_IMAGE_TAG": "4.3.0_dev",
          "OXD_IMAGE_NAME": "gluufederation/oxd-server",
          "OXD_IMAGE_TAG": "4.3.0_dev",
          "OXPASSPORT_IMAGE_NAME": "gluufederation/oxpassport",
          "OXPASSPORT_IMAGE_TAG": "4.3.0_dev",
          "OXSHIBBOLETH_IMAGE_NAME": "gluufederation/oxshibboleth",
          "OXSHIBBOLETH_IMAGE_TAG": "4.3.0_dev",
          "OXTRUST_IMAGE_NAME": "gluufederation/oxtrust",
          "OXTRUST_IMAGE_TAG": "4.3.0_dev",
          "PERSISTENCE_IMAGE_NAME": "gluufederation/persistence",
          "PERSISTENCE_IMAGE_TAG": "4.3.0_dev",
          "UPGRADE_IMAGE_NAME": "gluufederation/upgrade",
          "UPGRADE_IMAGE_TAG": "4.3.0_dev",
          "CONFIRM_PARAMS": "Y",
          "GLUU_LDAP_MULTI_CLUSTER": "",
          "GLUU_LDAP_SERF_PORT": "",
          "GLUU_LDAP_ADVERTISE_ADDRESS": "",
          "GLUU_LDAP_ADVERTISE_ADMIN_PORT": "",
          "GLUU_LDAP_ADVERTISE_LDAPS_PORT": "",
          "GLUU_LDAP_ADVERTISE_REPLICATION_PORT": "",
          "GLUU_LDAP_SECONDARY_CLUSTER": "",
          "GLUU_LDAP_SERF_PEERS": "",
          "GLUU_INSTALL_SQL": "Y",
          "GLUU_SQL_DB_DIALECT": "mysql",
          "GLUU_SQL_DB_NAMESPACE": "sql",
          "GLUU_SQL_DB_HOST": "gluu-mysql.sql.svc.cluster.local",
          "GLUU_SQL_DB_PORT": 3306,
          "GLUU_SQL_DB_NAME": "gluu",
          "GLUU_SQL_DB_USER": "gluu",
          "GLUU_SQL_DB_PASSWORD": "#~iL2N",
          "GOOGLE_SERVICE_ACCOUNT_BASE64": "",
          "USE_GOOGLE_SECRET_MANAGER": "",
          "GOOGLE_SPANNER_INSTANCE_ID": "",
          "GOOGLE_SPANNER_DATABASE_ID": "",
          "GOOGLE_PROJECT_ID": "",
          "MIGRATION_ENABLED": "N",
          "MIGRATION_DIR": "",
          "MIGRATION_DATA_FORMAT": "",
          "GLUU_SCIM_PROTECTION_MODE": "OAUTH"
        }
        EOF


    - name: Install microk8s
      run: |
        sudo snap install microk8s --classic --channel=1.18
        sudo snap alias microk8s.kubectl kubectl
        sudo microk8s.status --wait-ready
        sudo microk8s.enable dns registry ingress
        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
        chmod 700 get_helm.sh
        ./get_helm.sh
        sudo helm version

    - name: SQL
      if: ${{ matrix.persistence-backends == '"sql"' }}
      run: |
          cd /home/runner/work/test/
          sudo microk8s config > config
          #cat settings.json | sed 's/"GLUU_SQL_DB_HOST": "gluu-postgresql.sql.svc.cluster.local"/"GLUU_SQL_DB_HOST": "gluu-mysql.sql.svc.cluster.local"/g' > tmpfile.py && mv tmpfile.py settings.json
          #touch sqlfile


   # - name: PostGRE
   #   if: ${{ matrix.persistence-backends == '"pgsql"' }}
   #   run: |
   #       cd /home/runner/work/test/
   #       cat settings.json | sed 's/"INSTALL_COUCHBASE": "Y"/"INSTALL_COUCHBASE": "N"/g' |  sed -s "s@cbgluu.cbns.svc.cluster.local@$COUCHBASE_IP@g" > tmpfile.py && mv tmpfile.py settings.json
   #       cat settings.json | sed 's/"GLUU_INSTALL_SQL": "N"/"GLUU_INSTALL_SQL": "Y"/g' > tmpfile.py && mv tmpfile.py settings.json
   #       cat settings.json | sed 's/"GLUU_SQL_DB_DIALECT": "mysql"/"GLUU_SQL_DB_DIALECT": "pgsql"/g' > tmpfile.py && mv tmpfile.py settings.json
   #       cat settings.json | sed 's/"PERSISTENCE_BACKEND": "pgsql"/"PERSISTENCE_BACKEND": "sql"/g' > tmpfile.py && mv tmpfile.py settings.json
   #       touch sqlfile


    - name: Test Pygluu kubernetes
      id: test_kubernetes
      run: |
          cd /home/runner/work/test/
          sudo ./pygluu-kubernetes.pyz ${{ matrix.test-cases }}
          sleep 30
          sudo microk8s.kubectl get po -n cbns
          sudo microk8s.kubectl get po -n gluu
          cat /home/runner/work/test/settings.json
          sudo kubectl -n gluu wait --for=condition=available --timeout=600s deploy/gluu-oxauth || sudo kubectl logs -l app=oxauth -c oxauth -n gluu || echo "Not Found"
          sudo kubectl wait -n gluu --for=condition=ready pod --timeout=300s -l statefulset.kubernetes.io/pod-name=gluu-oxtrust-0 || sudo kubectl logs -l app=oxtrust -c oxtrust -n gluu || echo "Not Found"
          sudo kubectl -n gluu wait --for=condition=available --timeout=300s deploy/gluu-oxpassport || sudo kubectl logs -l app=oxpassport -c oxpassport -n gluu || echo "Not Found"
          sudo kubectl -n gluu wait --for=condition=available --timeout=300s deploy/gluu-casa || sudo kubectl logs -l app=casa -c casa -n gluu || echo "Not Found"
          sudo kubectl -n gluu wait --for=condition=available --timeout=300s deploy/gluu-oxd-server || sudo kubectl logs -l app=oxd-server -c oxd-server -n gluu || echo "Not Found"
          sudo kubectl wait -n gluu --for=condition=ready pod --timeout=300s -l statefulset.kubernetes.io/pod-name=gluu-oxshibboleth-0 || sudo kubectl logs -l app=oxshiboleth -c oxshiboleth -n gluu || echo "Not Found"

